---
title: "Lab 13"
author: "Adam Bisharat"
format: gfm
---

```{r}
library(BiocManager)
library(DESeq2)
```

```{r}
counts <- read.csv("airway_scaledcounts.csv", row.names=1)
metadata <-  read.csv("airway_metadata.csv", row.names=1)

nrow(counts)
```

```{r}
head(counts)
View(metadata)

```


> Q1. How many genes are in this dataset?

There are 38694 genes 


```{r}
sum (metadata$dex == "control")

table(metadata$dex)


```

> Q2. How many ‘control’ cell lines do we have?

There are 4 control cell lines



## Toy differential expression analysis


Calculate the mean per gene count values for all "control" samples (i.e columns in `counts`) and do the same for "treated" and then compare them.




1. Find all "control values/columns in `counts`

```{r}
table(metadata$dex == "control")

```


> Q3. How would you make the above code in either approach more robust? Is there a function that could help here? 

```{r}
control.inds <- metadata$dex == "control"
control.counts <- counts[,control.inds]
```


2. Find the mean per gene across all control columns.

```{r}
control.mean <- apply(control.counts, 1, mean)
```



> Q4. Follow the same procedure for the treated samples (i.e. calculate the mean per gene across drug treated samples and assign to a labeled vector called treated.mean)


```{r}

treated.inds <- metadata$dex == "treated"
treated.counts <- counts[,treated.inds]
treated.mean <- apply(treated.counts, 1, mean)
```

> Q5 (a). Create a scatter plot showing the mean of the treated samples against the mean of the control samples. Your plot should look something like the following.

```{r}
meancounts <- data.frame(control.mean, treated.mean)
plot(meancounts[,1],meancounts[,2], xlab="Control", ylab="Treated")

plot(meancounts, log='xy')
```
>Q5 (b).You could also use the ggplot2 package to make this figure producing the plot below. What geom_?() function would you use for this plot? 

point

```{r}
library(ggplot2)

ggplot(meancounts, aes(x = control.mean, y = treated.mean)) +
  geom_point() +
  xlab("Control") +
  ylab("Treated") +
  ggtitle("Control vs Treated Mean Counts")
```

> Q6. Try plotting both axes on a log scale. What is the argument to plot() that allows you to do this? 

plot(meancounts, `log='xy')`


We most frequently use log2 transformations for this type of data

```{r}
log2(10/10)

log2(20/10)

log2(30/10)

log2(40/10)

log2(10/20)
```
These log2 values make the interpretation of "fold-change" a little easier and a rule-of-thumb in the field is a log2 fold-change of +2 or -2 is where we start to pay attention



```{r}
log2(40/10)
```

Lets calculate the log2 (fold-change) and add it to our `meancounts` data.frame

```{r}
meancounts$log2fc <- log2(meancounts$treated.mean/meancounts$control.mean)

head(meancounts)
```



>Q7. What is the purpose of the arr.ind argument in the which() function call above? Why would we then take the first column of the output and need to call the unique() function?

```{r}
to.rm <- rowSums((meancounts[,1:2]==0) > 0)
mycounts <- meancounts[!to.rm,]
```

> Q. how many genes do I have left after this zero count filtering

```{r}
nrow(mycounts)
```

>Q8. How many genes are "up" regulated upon drug treatment with a threshold of +2 log2-fold-change?

```{r}
up.ind <- mycounts$log2fc > 2
count(up.ind)
```
250 up-regulated genes

>Q9. How many genes are "down" regulated upon drug treatment with a threshold of -2 log2-fold-change?

```{r}
down.ind <- mycounts$log2fc < (-2)
count(down.ind)
```
367 down regulated genes


> Q10. Do you trust these results? Why or why not?

No, there is no statistics to analyze if these results are statistically significant.





```{r}
library(DESeq2)
#citation("DESeq2")
```
The first function that we will use will setup the data in the way (format) DESeq wants it.

```{r}
dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)
dds
```

The function in the package is called `DESeq()`, and we can run it on our `dds` object.


```{r}
DESeq(dds)
```

```{r}

dds <- estimateSizeFactors(dds)

sizeFactors(dds)


dds <- estimateDispersions(dds)

#dispersions(dds) 

dds <- nbinomWaldTest(dds)

dds <- DESeqDataSetFromMatrix(countData=counts, 
                              colData=metadata, 
                              design=~dex)

dds <- DESeq(dds)

```

```{r}
res <- results(dds)

```




Make a common overall results figure from this analysis. This is designed to keep our inner biologist and inner stats nerd happy - It plots fold -change on x-axis vs p-value on y axis



```{r}
plot( res$log2FoldChange,  -log(res$padj) )
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.1), col="gray", lty=2)
```

Add some color:

```{r}
mycols <- rep("gray", nrow(res))
mycols[res$log2FoldChange > 2 ]  <- "red" 
mycols[res$log2FoldChange < -2 ] <- "red"
mycols[res$padj >.005] <- "grey"

inds <- (res$padj < 0.01) & (abs(res$log2FoldChange) > 2 )
mycols[ inds ] <- "blue"
 
plot( res$log2FoldChange,  -log(res$padj), 
 col=mycols, ylab="-Log(P-value)", xlab="Log2(FoldChange)" )
abline(v=c(-2,2), col="gray", lty=2)
abline(h=-log(0.005), col="gray", lty=2)

```



```{r}
write.csv(res, file="myresults.csv")
```


```{r}
head(res)
```
I need to translate our gene identifiers "ENSG000..." into the gene names that the rest of the world can understand.

To this "annotation" I will use the **"AnnotationDbi"** package. I can install this with `BiocManager::install()`

```{r}
library(AnnotationDbi)
library(org.Hs.eg.db)

columns(org.Hs.eg.db)
```



```{r}
res$symbol <- mapIds(org.Hs.eg.db,
              keys = rownames(res),
              keytype = "ENSEMBL", 
              column = "SYMBOL"
)

head(res)
```

```{r}
res$genename <-  mapIds(org.Hs.eg.db,
              keys = rownames(res),
              keytype = "ENSEMBL", 
              column = "GENENAME"
              )
```

```{r}
res$entrez <- mapIds(org.Hs.eg.db,
              keys = rownames(res),
              keytype = "ENSEMBL", 
              column = "ENTREZID"
              )

head(res)
```



```{r}
write.csv(res, file="results_annotated.csv")
```

Now that we have our results with added annotation we can do some pathway mapping

Let's use the **gage** package to look for KEGG pathways in our results (genes of interest). I will also use the **pathview** package to draw little pathway figures.

```{r}
library(pathview)
library(gage)
library(gageData)

data(kegg.sets.hs)

# Examine the first 2 pathways in this kegg set for humans
head(kegg.sets.hs, 2)
```

What **gage** wants as input is not my big table/data.frame of results. It just wants a "vetor of importance."
 For RNASeq data like we have this is our log2FC values...
 
```{r}
foldchanges = res$log2FoldChange
names(foldchanges) = res$entrez
head(foldchanges)
```


```{r}
keggres = gage(foldchanges, gsets =kegg.sets.hs)
```


```{r}
attributes(keggres)
```


```{r}
head(keggres$less, 3)
```

Let's use the pathview package to look at one of these highlighted KEGG pathways with out genes highlighted. 


```{r}
pathview(gene.data=foldchanges, pathway.id="hsa05310")
```

![Asthma Pathway with my DEGs](hsa05310.pathview.png)





```{r}
vsd <- vst(dds, blind = FALSE)
plotPCA(vsd, intgroup = c("dex"))

pcaData <- plotPCA(vsd, intgroup=c("dex"), returnData=TRUE)
head(pcaData)

percentVar <- round(100 * attr(pcaData, "percentVar"))

ggplot(pcaData) +
  aes(x = PC1, y = PC2, color = dex) +
  geom_point(size =3) +
  xlab(paste0("PC1: ", percentVar[1], "% variance")) +
  ylab(paste0("PC2: ", percentVar[2], "% variance")) +
  coord_fixed() +
  theme_bw()
```





